generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Unit {
  TSP
  TBSP
  CUP
  MG
  G
  KG
  OZ
  FLOZ
}

enum CategoryType {
  CUSTOM
  MEAL
  CUISINE
  DISH_TYPE
  CONSIDERATION
  OCCASION
  PREPARATION
  SEASON
}

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  email          String    @unique
  name           String
  googleId       Int?      @unique
  avatarUrl      String?
  hash           String
  salt           String
  ownKitchen     Kitchen?  @relation("KitchenOwnership")
  kitchens       Kitchen[] @relation(references: [id])
  starredRecipes Recipe[]
  recipes        Recipe[]  @relation("RecipeOwnership")
}

model Kitchen {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  description String?
  owner       User       @relation("KitchenOwnership", references: [id], fields: [ownerId])
  ownerId     Int
  users       User[]     @relation(references: [id])
  recipes     Recipe[]
  categories  Category[]
}

model Recipe {
  id                 Int                       @id @default(autoincrement())
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  name               String?
  summary            String?
  publicID           String                    @unique
  isPublic           Boolean                   @default(value: false)
  sourceName         String?
  sourceURL          String?
  servings           Int?
  prepDuration       Int?
  cookDuration       Int?
  totalDuration      Int?
  kitchen            Kitchen                   @relation(references: [id], fields: [kitchenId])
  kitchenId          Int
  imageURL           String?
  ingredients        RecipeIngredient[]
  ingredientSections RecipeIngredientSection[]
  instructions       String?
  isDeleted          Boolean                   @default(value: false)
  categories         Category[]
  starredBy          User[]
  author             User                      @relation("RecipeOwnership", references: [id], fields: [authorId])
  authorId           Int

}

model Ingredient {
  id        Int                @id @default(autoincrement())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  name      String
  category  String
  uses      RecipeIngredient[]
}

model RecipeIngredient {
  id           Int                      @id @default(autoincrement())
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  freeform     String
  ingredient   Ingredient?              @relation(references: [id], fields: [ingredientId])
  ingredientId Int?
  recipe       Recipe                   @relation(references: [id], fields: [recipeId])
  recipeId     Int
  priority     Float
  quantity     Float?
  unit         Unit?
  section      RecipeIngredientSection? @relation(references: [id], fields: [sectionId])
  sectionId    Int?
}

model RecipeIngredientSection {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  name        String
  priority    Float              @default(value: 1)
  ingredients RecipeIngredient[]
  recipe      Recipe             @relation(references: [id], fields: [recipeId])
  recipeId    Int

}

model Category {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String
  description String
  kitchen     Kitchen      @relation(references: [id], fields: [kitchenId])
  kitchenId   Int
  type        CategoryType
  Recipe      Recipe?      @relation(fields: [recipeId], references: [id])
  recipeId    Int?
}
